class Cell:
    	vector <Cell*> neighbours ([North, Est, South, West])
    	Pawn* occupied
        char hasWall ("N", "H" or "V")
    public:
	    Cell(): occupied{nullptr}, hasWall{"N"} {}

    	void setAlllNeighbours(vector <Cell*> newNeighbours) {
    	    this->neighbours = newNeighbours
    	}
        
        Cell* getNeighbor(int neighbourLoc) {
            return *neighbours[neighbourLoc]

        void blockNeighbor(int neighbourLoc) {
            neighbours[neighbourLoc] = nullptr

        void removePawn() {
            occupied = nullptr;
        }

    	void acceptPawn(Pawn* newPawn, Cell* oldCell) {
    	    this->occupied = newPawn;
    	    oldCell->removePawn;
    	}

        void receiveWall(char wallType) {
            if wallType == "H" {
                neighbours[0].blockNeighbor(2)
                blockneighbour(0)

                if neighbour[1] {
                    neighbour[1]->getNeighbor[0]->blockNeighbor(2)
                    neighbor[1]->blockneighbor(0)
                }
            if wallType == "V" {
                neighbours[1].blockNeighbor(3)
                blockneighbour(1)

                if neighbour[0] {
                    neighbour[0]->getNeighbor[1]->blockNeighbor(3)
                    neighbor[0]->blockneighbor(1)
                }
            }
        }