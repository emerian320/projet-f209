<diagram program="umletino" version="14.4.0-SNAPSHOT"><zoom_level>10</zoom_level><help_text>Space for diagram note</help_text><element><id>UMLClass</id><coordinates><x>710</x><y>250</y><w>410</w><h>490</h></coordinates><panel_attributes>Board
--
- startWall : const int
- nplayer : int 
- end : bool = false
--
# size : const int
# boardSize : int
# matrix : vector&lt;vector&lt;shared_ptr&lt;MotherCell&gt; &gt; &gt;
# players : vector&lt;shared_ptr&lt;Player&gt; &gt;
# currentPlayer : int = 0
--
+ Board(int nplayer, int size=9, int startWalls=10) : explicit
+ getNplayer() const : int
+ getBoardSize() const : int
+ getPlayers() const : vector&lt;shared_ptr&lt;Player&gt; &gt;
+ getMatrix() const : vector&lt;vector&lt;shared_ptr&lt;MotherCell&gt; &gt; &gt;
+ isEnd() const : bool
+ face2Face(Position &amp;targetPos, int currentP) : bool
+ sidesP(Position &amp;targetPos, int current P) : vector&lt;int&gt;
+ diagonalMove(Position &amp;targetPos, int currentP) : bool
+ jumpOver(Position &amp;targetPos, int currentP) : bool
+ placeWall(string &amp;direction, Position &amp;pos, int currentP) : void
+ executeMove(string &amp;typeOfMove, Position &amp;pos, int currentP) : void
+ checkWall(string &amp;direction, Position &amp;pos) : virtual bool
+ isValid(string &amp;typeOfMove, Position &amp;move, int currentP) : bool
+ checkInput(string &amp;input, int currentP) : virtual bool
+ updateNeighbours(shared_ptr&lt;Piece&gt; piece, Position pos, string direction) : void
+ bindCells() : void
+ setPlayer(Position pos, int id) : shared_ptr&lt;Pawn&gt;
+ newGame() : void
+ possiblePaths() : bool
+ removeWall(const string &amp;direction, Position &amp;pos) : void
+ ~Board() : virtual</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>520</x><y>800</y><w>440</w><h>170</h></coordinates><panel_attributes>MotherCell
--
# cellPiece : shared_ptr&lt;Piece&gt;
# neighbours : vector&lt;shared_ptr&lt;MotherCell&gt; &gt; = {nullptr, nullptr, nullptr, nullptr}
--
+ getPiece() : shared_ptr&lt;Piece&gt;
+ setPiece(shared_ptr&lt;Piece&gt; piece) : void
+ occupied() : bool
+ setNeighbours(vector&lt;shared_ptr&lt;MotherCell&gt; &gt; &amp;neighboursVector) : void
+ getNeighbour(Position &amp;neighbourPos) : shared_ptr&lt;MotherCell&gt;
+ getNeighbour(int side) : shared_ptr&lt;MotherCell&gt;
+ setNeighbour(shared_ptr&lt;MotherCell&gt; neighbour, int side) : void</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>220</x><y>660</y><w>280</w><h>130</h></coordinates><panel_attributes>/Piece/
--
+ getTriplet() : virtual vector&lt;shared_ptr&lt;Piece&gt; &gt;
+ getPos() : virtual Position
+ setPos(Position pos) : virtual void
+ getID() : virtual int
+ wallD() : virtual string
+ isWall() : virtual bool
+ ~Piece() : virtual</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>80</x><y>370</y><w>270</w><h>180</h></coordinates><panel_attributes>Wall
--
- position : Position
- direction : string
- getTriplet() : virtual vector&lt;shared_ptr&lt;Piece&gt; &gt;
--
+ Wall(Position position, string direction)
+ getPos() : Position
+ setPos(Position pos) : void
+ getID() : int
+ wallD() : string
+ isWall() : bool
+ ~Wall() : virtual</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>730</x><y>730</y><w>30</w><h>90</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes><additional_attributes>10;10;10;70</additional_attributes></element><element><id>UMLClass</id><coordinates><x>370</x><y>370</y><w>270</w><h>180</h></coordinates><panel_attributes>Pawn
--
- position : Position
- id : int
- getTriplet() : virtual vector&lt;shared_ptr&lt;Piece&gt; &gt;
--
+ Pawn(Position position) 
+ getPos() : Position
+ setPos(Position pos) : void
+ getID() : int
+ wallD() : string
+ isWall() : bool
+ ~Wall() : virtual</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>210</x><y>0</y><w>300</w><h>200</h></coordinates><panel_attributes>Player
--
- id : int
- pawn : shared_ptr&lt;Pawn&gt;
- walls : int 
--
+ Player(int id, shared_ptr&lt;Pawn&gt; pawn, int walls=10)
+ getPawn() : shared_ptr&lt;Pawn&gt;
+ getPawnPos() : Position
+ setPawnPos(Position pos) : void
+ useWall() : void
+ hasWalls() const : bool
+ getId() const : int
+ addWall() : void</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>748</x><y>20</y><w>320</w><h>140</h></coordinates><panel_attributes>Game
--
- model : shared_ptr&lt;Board&gt;
- view : unique_ptr&lt;DisplayBoard&gt;
--
+ Game(shared_ptr&lt;Board&gt; model, DisplayBoard&amp; view)
+ getInput() : static string
+ inputFormat() : void
+ checkInput(string input, int player) : bool
+ start() : void</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>900</x><y>150</y><w>90</w><h>120</h></coordinates><panel_attributes>lt=-
m1=1
m2=1
modifies &gt;</panel_attributes><additional_attributes>10;10;10;100</additional_attributes></element><element><id>Relation</id><coordinates><x>350</x><y>190</y><w>190</w><h>200</h></coordinates><panel_attributes>lt=-
m1=1
m2=1..2
owns &gt;</panel_attributes><additional_attributes>10;10;10;100;150;100;150;180</additional_attributes></element><element><id>Relation</id><coordinates><x>500</x><y>70</y><w>270</w><h>50</h></coordinates><panel_attributes>lt=-
m1=2..4
m2=1
&lt; ask input</panel_attributes><additional_attributes>10;20;250;20</additional_attributes></element><element><id>Relation</id><coordinates><x>490</x><y>690</y><w>170</w><h>130</h></coordinates><panel_attributes>lt=-
m1=1
m2=1
&lt; occupied by </panel_attributes><additional_attributes>10;20;140;20;140;110</additional_attributes></element><element><id>Relation</id><coordinates><x>214</x><y>540</y><w>170</w><h>140</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>150;120;150;70;10;70;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>354</x><y>540</y><w>170</w><h>140</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>10;120;10;70;150;70;150;10</additional_attributes></element><element><id>Relation</id><coordinates><x>210</x><y>190</y><w>180</w><h>200</h></coordinates><panel_attributes>lt=-
m1=1
m2=10
&lt; owns</panel_attributes><additional_attributes>150;10;150;100;10;100;10;180</additional_attributes></element><element><id>UMLClass</id><coordinates><x>850</x><y>1000</y><w>270</w><h>90</h></coordinates><panel_attributes>DisplayBoard
--
- board : const shared_ptr&lt;Board&gt;
--
+ DisplayBoard(const shared_ptr&lt;Board&gt; board)
+ DisplayBoard()
+ printBoard() const : void</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>980</x><y>730</y><w>80</w><h>290</h></coordinates><panel_attributes>lt=-
m1=1
&lt; display</panel_attributes><additional_attributes>10;10;10;270</additional_attributes></element><element><id>UMLClass</id><coordinates><x>220</x><y>860</y><w>270</w><h>230</h></coordinates><panel_attributes>Position
--
- x : int
- y : int
--
+ Position(int x, int y)
+ Position(string pos)
+ setX(int nX) : void
+ setY(int nY) : void
+ getX() const : int
+ getY() const : int
+ operator==(const Position&amp; other) const : bool
+ operator*(int i) : Position
+ operator/(int i) : Position
+ operator-(Position &amp;other) const : Position
+ operator=(Position &amp;other) : Position</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>350</x><y>780</y><w>30</w><h>100</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes><additional_attributes>10;10;10;80</additional_attributes></element></diagram>